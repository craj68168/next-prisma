import Head from "next/head";
import { useFormik } from "formik";
import { mutate } from "swr";
import * as Yup from "yup";
import { useEffect, useState } from "react";
import { UserForm } from "@/components/UserAddEditComponent";
import { notification } from "antd";
import styled from "styled-components";
import Link from "next/link";
const TableWrapper = styled.div`
  table {
    font-family: arial, sans-serif;
    border-collapse: collapse;
    width: 50%;
    margin: 20px;
  }

  td,
  th {
    border: 1px solid #dddddd;
    text-align: left;
    padding: 8px;
  }
  .table-row {
  }
  .edit {
    display: flex;
    justify-content: center;
    align-items: center;
  }
  .table-heads {
    align-items: row;
  }
`;
export default function Home() {
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [allUsers, setAllUsers] = useState([]);
  const [isCreated, setIsCreated] = useState(false);
  const validation = Yup.object().shape({
    email: Yup.string().required("Required"),
    password: Yup.string().required("Required"),
    firstName: Yup.string().required("Required"),
    lastName: Yup.string().required("Required"),
  });
  const initialValues = {
    email: "",
    password: "",
    firstName: "",
    lastName: "",
  };
  const formik: any = useFormik({
    initialValues: initialValues,
    validationSchema: validation,
    onSubmit: (value, { resetForm }) => {
      handleSubmit(value);
      resetForm();
    },
  });

  const getAllUsers = async () => {
    const res = await fetch("/api/users", {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
      },
    });

    if (res.ok) {
      mutate("/api/users");
      const data = await res.json();
      setAllUsers(data);
      setIsCreated(false);
    } else {
      notification.error({
        message: `Failed to create flashcard. Reason: ${res.statusText}`,
      });
    }
  };

  const handleSubmit = async (value: any) => {
    const res = await fetch("/api/users", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(value),
    });

    if (res.ok) {
      mutate("/api/users");
      setIsModalOpen(false);
      setIsCreated(true);
      notification.success({
        message: `${res.statusText}`,
      });
      return await res.json();
    } else {
      notification.error({
        message: `Failed to create flashcard. Reason: ${res.statusText}`,
      });
    }
  };
  useEffect(() => {
    getAllUsers();
  }, [isCreated]);

  return (
    <>
      <Head>
        <title>User</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <UserForm
        formik={formik}
        setIsModalOpen={setIsModalOpen}
        isModalOpen={isModalOpen}
      />
      <TableWrapper>
        <table>
          <tr className="table-row">
            <th>ID</th>
            <th>Email</th>
            <th>First Name</th>
            <th>Last Name</th>
            <th className="edit">Action</th>
          </tr>
          {allUsers?.length
            ? allUsers?.map((user: any) => {
                return (
                  <tr className="table-row">
                    <td>{user?.id}</td>
                    <td>{user?.email}</td>
                    <td>{user?.firstName}</td>
                    <td>{user?.lastName}</td>
                    <td className="edit">
                      <Link href={`/user-info/${user?.id}`}>Edit</Link>
                    </td>
                  </tr>
                );
              })
            : []}
        </table>
      </TableWrapper>
    </>
  );
}
